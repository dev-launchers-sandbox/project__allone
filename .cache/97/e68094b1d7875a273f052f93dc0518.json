{"id":"xPta","dependencies":[{"name":"/home/travis/build/dev-launchers-sandbox/project__allone/package.json","includedInParent":true,"mtime":1589925283588},{"name":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/package.json","includedInParent":true,"mtime":1589925280695},{"name":"./Clamp","loc":{"line":7,"column":20},"parent":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/math/FromPercent.js","resolved":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/math/Clamp.js"}],"generated":{"js":"var r=require(\"./Clamp\"),e=function(e,u,n){return(n-u)*(e=r(e,0,1))};module.exports=e;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":7,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":7,"column":0},"generated":{"line":1,"column":4}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":7,"column":0},"generated":{"line":1,"column":6}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":7,"column":0},"generated":{"line":1,"column":14}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":21,"column":0},"generated":{"line":1,"column":25}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":21,"column":0},"generated":{"line":1,"column":27}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":21,"column":0},"generated":{"line":1,"column":36}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":21,"column":0},"generated":{"line":1,"column":38}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":21,"column":0},"generated":{"line":1,"column":40}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":25,"column":0},"generated":{"line":1,"column":43}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":25,"column":0},"generated":{"line":1,"column":50}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":25,"column":0},"generated":{"line":1,"column":52}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":23,"column":0},"generated":{"line":1,"column":56}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":23,"column":0},"generated":{"line":1,"column":58}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":23,"column":0},"generated":{"line":1,"column":60}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":23,"column":0},"generated":{"line":1,"column":62}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":23,"column":0},"generated":{"line":1,"column":64}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":28,"column":0},"generated":{"line":1,"column":69}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":28,"column":0},"generated":{"line":1,"column":76}},{"source":"node_modules/phaser/src/math/FromPercent.js","original":{"line":28,"column":0},"generated":{"line":1,"column":84}}],"sources":{"node_modules/phaser/src/math/FromPercent.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Clamp = require('./Clamp');\r\n\r\n/**\r\n * Return a value based on the range between `min` and `max` and the percentage given.\r\n *\r\n * @function Phaser.Math.FromPercent\r\n * @since 3.0.0\r\n *\r\n * @param {number} percent - A value between 0 and 1 representing the percentage.\r\n * @param {number} min - The minimum value.\r\n * @param {number} [max] - The maximum value.\r\n *\r\n * @return {number} The value that is `percent` percent between `min` and `max`.\r\n */\r\nvar FromPercent = function (percent, min, max)\r\n{\r\n    percent = Clamp(percent, 0, 1);\r\n\r\n    return (max - min) * percent;\r\n};\r\n\r\nmodule.exports = FromPercent;\r\n"},"lineCount":null}},"error":null,"hash":"107f63c92e219f4f048da7a6f34e4d40","cacheData":{"env":{}}}