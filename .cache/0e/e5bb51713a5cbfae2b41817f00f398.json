{"id":"AOvb","dependencies":[{"name":"/home/travis/build/dev-launchers-sandbox/project__allone/package.json","includedInParent":true,"mtime":1589925283588},{"name":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/package.json","includedInParent":true,"mtime":1589925280695},{"name":"./CanvasSnapshot","loc":{"line":32,"column":20},"parent":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/renderer/snapshot/index.js","resolved":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/renderer/snapshot/CanvasSnapshot.js"},{"name":"./WebGLSnapshot","loc":{"line":33,"column":19},"parent":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/renderer/snapshot/index.js","resolved":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/renderer/snapshot/WebGLSnapshot.js"}],"generated":{"js":"module.exports={Canvas:require(\"./CanvasSnapshot\"),WebGL:require(\"./WebGLSnapshot\")};"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":30,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":30,"column":0},"generated":{"line":1,"column":7}},{"source":"node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":30,"column":0},"generated":{"line":1,"column":15}},{"source":"node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":32,"column":0},"generated":{"line":1,"column":16}},{"source":"node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":32,"column":0},"generated":{"line":1,"column":23}},{"source":"node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":32,"column":0},"generated":{"line":1,"column":31}},{"source":"node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":33,"column":0},"generated":{"line":1,"column":51}},{"source":"node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":33,"column":0},"generated":{"line":1,"column":57}},{"source":"node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":33,"column":0},"generated":{"line":1,"column":65}}],"sources":{"node_modules/phaser/src/renderer/snapshot/index.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * @callback SnapshotCallback\r\n *\r\n * @param {(Phaser.Display.Color|HTMLImageElement)} snapshot - Either a Color object if a single pixel is being grabbed, or a new Image which contains a snapshot of the canvas contents.\r\n */\r\n\r\n/**\r\n * @typedef {object} SnapshotState\r\n *\r\n * @property {SnapshotCallback} callback - The function to call after the snapshot is taken.\r\n * @property {string} [type='image/png'] - The format of the image to create, usually `image/png` or `image/jpeg`.\r\n * @property {number} [encoderOptions=0.92] - The image quality, between 0 and 1. Used for image formats with lossy compression, such as `image/jpeg`.\r\n * @property {integer} [x=0] - The x coordinate to start the snapshot from.\r\n * @property {integer} [y=0] - The y coordinate to start the snapshot from.\r\n * @property {integer} [width] - The width of the snapshot.\r\n * @property {integer} [height] - The height of the snapshot.\r\n * @property {boolean} [getPixel=false] - Is this a snapshot to get a single pixel, or an area?\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Renderer.Snapshot\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    Canvas: require('./CanvasSnapshot'),\r\n    WebGL: require('./WebGLSnapshot')\r\n\r\n};\r\n"},"lineCount":null}},"error":null,"hash":"8deeddfef07b86e0d236dd6028e28dd3","cacheData":{"env":{}}}