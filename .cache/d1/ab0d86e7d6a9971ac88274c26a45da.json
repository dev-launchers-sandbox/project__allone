{"id":"aB3T","dependencies":[{"name":"/home/travis/build/dev-launchers-sandbox/project__allone/package.json","includedInParent":true,"mtime":1589925283588},{"name":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/package.json","includedInParent":true,"mtime":1589925280695},{"name":"../../utils/Class","loc":{"line":7,"column":20},"parent":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/utils/Class.js"},{"name":"../../gameobjects/components","loc":{"line":8,"column":25},"parent":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/gameobjects/components/index.js"},{"name":"./DynamicTilemapLayerRender","loc":{"line":9,"column":40},"parent":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayerRender.js"},{"name":"../../gameobjects/GameObject","loc":{"line":10,"column":25},"parent":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/gameobjects/GameObject.js"},{"name":"../components","loc":{"line":11,"column":32},"parent":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","resolved":"/home/travis/build/dev-launchers-sandbox/project__allone/node_modules/phaser/src/tilemaps/components/index.js"}],"generated":{"js":"var i=require(\"../../utils/Class\"),t=require(\"../../gameobjects/components\"),e=require(\"./DynamicTilemapLayerRender\"),l=require(\"../../gameobjects/GameObject\"),r=require(\"../components\"),n=new i({Extends:l,Mixins:[t.Alpha,t.BlendMode,t.ComputedSize,t.Depth,t.Flip,t.GetBounds,t.Origin,t.Pipeline,t.ScaleMode,t.Transform,t.Visible,t.ScrollFactor,e],initialize:function(i,t,e,n,s,o){l.call(this,i,\"DynamicTilemapLayer\"),this.isTilemap=!0,this.tilemap=t,this.layerIndex=e,this.layer=t.layers[e],this.layer.tilemapLayer=this,this.tileset=[],this.culledTiles=[],this.skipCull=!1,this.tilesDrawn=0,this.tilesTotal=this.layer.width*this.layer.height,this.cullPaddingX=1,this.cullPaddingY=1,this.cullCallback=r.CullTiles,this._renderOrder=0,this.gidMap=[],this.setTilesets(n),this.setAlpha(this.layer.alpha),this.setPosition(s,o),this.setOrigin(),this.setSize(t.tileWidth*this.layer.width,t.tileHeight*this.layer.height),this.initPipeline(\"TextureTintPipeline\")},setTilesets:function(i){var t=[],e=[],l=this.tilemap;Array.isArray(i)||(i=[i]);for(var r=0;r<i.length;r++){var n=i[r];if(\"string\"==typeof n&&(n=l.getTileset(n)),n){e.push(n);for(var s=n.firstgid,o=0;o<n.total;o++)t[s+o]=n}}this.gidMap=t,this.tileset=e},setRenderOrder:function(i){return\"string\"==typeof i&&(i=[\"right-down\",\"left-down\",\"right-up\",\"left-up\"].indexOf(i)),i>=0&&i<4&&(this._renderOrder=i),this},calculateFacesAt:function(i,t){return r.CalculateFacesAt(i,t,this.layer),this},calculateFacesWithin:function(i,t,e,l){return r.CalculateFacesWithin(i,t,e,l,this.layer),this},createFromTiles:function(i,t,e,l,n){return r.CreateFromTiles(i,t,e,l,n,this.layer)},cull:function(i){return this.cullCallback(this.layer,i,this.culledTiles,this._renderOrder)},copy:function(i,t,e,l,n,s,o){return r.Copy(i,t,e,l,n,s,o,this.layer),this},destroy:function(){this.layer.tilemapLayer===this&&(this.layer.tilemapLayer=void 0),this.tilemap=void 0,this.layer=void 0,this.culledTiles.length=0,this.cullCallback=null,this.gidMap=[],this.tileset=[],l.prototype.destroy.call(this)},fill:function(i,t,e,l,n,s){return r.Fill(i,t,e,l,n,s,this.layer),this},filterTiles:function(i,t,e,l,n,s,o){return r.FilterTiles(i,t,e,l,n,s,o,this.layer)},findByIndex:function(i,t,e){return r.FindByIndex(i,t,e,this.layer)},findTile:function(i,t,e,l,n,s,o){return r.FindTile(i,t,e,l,n,s,o,this.layer)},forEachTile:function(i,t,e,l,n,s,o){return r.ForEachTile(i,t,e,l,n,s,o,this.layer),this},getTileAt:function(i,t,e){return r.GetTileAt(i,t,e,this.layer)},getTileAtWorldXY:function(i,t,e,l){return r.GetTileAtWorldXY(i,t,e,l,this.layer)},getTilesWithin:function(i,t,e,l,n){return r.GetTilesWithin(i,t,e,l,n,this.layer)},getTilesWithinShape:function(i,t,e){return r.GetTilesWithinShape(i,t,e,this.layer)},getTilesWithinWorldXY:function(i,t,e,l,n,s){return r.GetTilesWithinWorldXY(i,t,e,l,n,s,this.layer)},hasTileAt:function(i,t){return r.HasTileAt(i,t,this.layer)},hasTileAtWorldXY:function(i,t,e){return r.HasTileAtWorldXY(i,t,e,this.layer)},putTileAt:function(i,t,e,l){return r.PutTileAt(i,t,e,l,this.layer)},putTileAtWorldXY:function(i,t,e,l,n){return r.PutTileAtWorldXY(i,t,e,l,n,this.layer)},putTilesAt:function(i,t,e,l){return r.PutTilesAt(i,t,e,l,this.layer),this},randomize:function(i,t,e,l,n){return r.Randomize(i,t,e,l,n,this.layer),this},removeTileAt:function(i,t,e,l){return r.RemoveTileAt(i,t,e,l,this.layer)},removeTileAtWorldXY:function(i,t,e,l,n){return r.RemoveTileAtWorldXY(i,t,e,l,n,this.layer)},renderDebug:function(i,t){return r.RenderDebug(i,t,this.layer),this},replaceByIndex:function(i,t,e,l,n,s){return r.ReplaceByIndex(i,t,e,l,n,s,this.layer),this},setSkipCull:function(i){return void 0===i&&(i=!0),this.skipCull=i,this},setCullPadding:function(i,t){return void 0===i&&(i=1),void 0===t&&(t=1),this.cullPaddingX=i,this.cullPaddingY=t,this},setCollision:function(i,t,e){return r.SetCollision(i,t,e,this.layer),this},setCollisionBetween:function(i,t,e,l){return r.SetCollisionBetween(i,t,e,l,this.layer),this},setCollisionByProperty:function(i,t,e){return r.SetCollisionByProperty(i,t,e,this.layer),this},setCollisionByExclusion:function(i,t,e){return r.SetCollisionByExclusion(i,t,e,this.layer),this},setCollisionFromCollisionGroup:function(i,t){return r.SetCollisionFromCollisionGroup(i,t,this.layer),this},setTileIndexCallback:function(i,t,e){return r.SetTileIndexCallback(i,t,e,this.layer),this},setTileLocationCallback:function(i,t,e,l,n,s){return r.SetTileLocationCallback(i,t,e,l,n,s,this.layer),this},shuffle:function(i,t,e,l){return r.Shuffle(i,t,e,l,this.layer),this},swapByIndex:function(i,t,e,l,n,s){return r.SwapByIndex(i,t,e,l,n,s,this.layer),this},tileToWorldX:function(i,t){return r.TileToWorldX(i,t,this.layer)},tileToWorldY:function(i,t){return r.TileToWorldY(i,t,this.layer)},tileToWorldXY:function(i,t,e,l){return r.TileToWorldXY(i,t,e,l,this.layer)},weightedRandomize:function(i,t,e,l,n){return r.WeightedRandomize(i,t,e,l,n,this.layer),this},worldToTileX:function(i,t,e){return r.WorldToTileX(i,t,e,this.layer)},worldToTileY:function(i,t,e){return r.WorldToTileY(i,t,e,this.layer)},worldToTileXY:function(i,t,e,l,n){return r.WorldToTileXY(i,t,e,l,n,this.layer)}});module.exports=n;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":4}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":6}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":7,"column":0},"generated":{"line":1,"column":14}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":8,"column":0},"generated":{"line":1,"column":35}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":8,"column":0},"generated":{"line":1,"column":37}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":8,"column":0},"generated":{"line":1,"column":45}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":9,"column":0},"generated":{"line":1,"column":77}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":9,"column":0},"generated":{"line":1,"column":79}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":9,"column":0},"generated":{"line":1,"column":87}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":10,"column":0},"generated":{"line":1,"column":118}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":10,"column":0},"generated":{"line":1,"column":120}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":10,"column":0},"generated":{"line":1,"column":128}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":11,"column":0},"generated":{"line":1,"column":160}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":11,"column":0},"generated":{"line":1,"column":162}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":11,"column":0},"generated":{"line":1,"column":170}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":50,"column":0},"generated":{"line":1,"column":187}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":50,"column":0},"generated":{"line":1,"column":189}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":50,"column":0},"generated":{"line":1,"column":193}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":50,"column":0},"generated":{"line":1,"column":195}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":52,"column":0},"generated":{"line":1,"column":196}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":52,"column":0},"generated":{"line":1,"column":204}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":54,"column":0},"generated":{"line":1,"column":206}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":54,"column":0},"generated":{"line":1,"column":213}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":55,"column":0},"generated":{"line":1,"column":214}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":55,"column":0},"generated":{"line":1,"column":216}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":56,"column":0},"generated":{"line":1,"column":222}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":56,"column":0},"generated":{"line":1,"column":224}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":57,"column":0},"generated":{"line":1,"column":234}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":57,"column":0},"generated":{"line":1,"column":236}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":58,"column":0},"generated":{"line":1,"column":249}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":58,"column":0},"generated":{"line":1,"column":251}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":59,"column":0},"generated":{"line":1,"column":257}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":59,"column":0},"generated":{"line":1,"column":259}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":60,"column":0},"generated":{"line":1,"column":264}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":60,"column":0},"generated":{"line":1,"column":266}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":61,"column":0},"generated":{"line":1,"column":276}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":61,"column":0},"generated":{"line":1,"column":278}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":62,"column":0},"generated":{"line":1,"column":285}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":62,"column":0},"generated":{"line":1,"column":287}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":63,"column":0},"generated":{"line":1,"column":296}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":63,"column":0},"generated":{"line":1,"column":298}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":64,"column":0},"generated":{"line":1,"column":308}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":64,"column":0},"generated":{"line":1,"column":310}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":65,"column":0},"generated":{"line":1,"column":320}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":65,"column":0},"generated":{"line":1,"column":322}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":66,"column":0},"generated":{"line":1,"column":330}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":66,"column":0},"generated":{"line":1,"column":332}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":67,"column":0},"generated":{"line":1,"column":345}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":70,"column":0},"generated":{"line":1,"column":348}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":359}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":368}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":370}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":372}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":374}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":376}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":72,"column":0},"generated":{"line":1,"column":378}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":74,"column":0},"generated":{"line":1,"column":381}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":74,"column":0},"generated":{"line":1,"column":383}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":74,"column":0},"generated":{"line":1,"column":388}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":74,"column":0},"generated":{"line":1,"column":393}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":74,"column":0},"generated":{"line":1,"column":395}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":84,"column":0},"generated":{"line":1,"column":418}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":84,"column":0},"generated":{"line":1,"column":423}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":84,"column":0},"generated":{"line":1,"column":434}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":93,"column":0},"generated":{"line":1,"column":436}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":93,"column":0},"generated":{"line":1,"column":441}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":93,"column":0},"generated":{"line":1,"column":449}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":102,"column":0},"generated":{"line":1,"column":451}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":102,"column":0},"generated":{"line":1,"column":456}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":102,"column":0},"generated":{"line":1,"column":467}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":112,"column":0},"generated":{"line":1,"column":469}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":112,"column":0},"generated":{"line":1,"column":474}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":112,"column":0},"generated":{"line":1,"column":480}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":112,"column":0},"generated":{"line":1,"column":482}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":112,"column":0},"generated":{"line":1,"column":489}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":115,"column":0},"generated":{"line":1,"column":492}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":115,"column":0},"generated":{"line":1,"column":497}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":115,"column":0},"generated":{"line":1,"column":503}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":115,"column":0},"generated":{"line":1,"column":516}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":126,"column":0},"generated":{"line":1,"column":521}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":126,"column":0},"generated":{"line":1,"column":526}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":126,"column":0},"generated":{"line":1,"column":534}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":136,"column":0},"generated":{"line":1,"column":537}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":136,"column":0},"generated":{"line":1,"column":542}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":136,"column":0},"generated":{"line":1,"column":554}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":149,"column":0},"generated":{"line":1,"column":557}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":149,"column":0},"generated":{"line":1,"column":562}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":149,"column":0},"generated":{"line":1,"column":572}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":159,"column":0},"generated":{"line":1,"column":574}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":159,"column":0},"generated":{"line":1,"column":579}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":159,"column":0},"generated":{"line":1,"column":590}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":592}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":597}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":608}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":613}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":619}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":625}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":630}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":169,"column":0},"generated":{"line":1,"column":636}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":181,"column":0},"generated":{"line":1,"column":643}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":181,"column":0},"generated":{"line":1,"column":648}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":181,"column":0},"generated":{"line":1,"column":661}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":193,"column":0},"generated":{"line":1,"column":663}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":193,"column":0},"generated":{"line":1,"column":668}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":193,"column":0},"generated":{"line":1,"column":681}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":212,"column":0},"generated":{"line":1,"column":683}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":212,"column":0},"generated":{"line":1,"column":688}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":212,"column":0},"generated":{"line":1,"column":701}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":212,"column":0},"generated":{"line":1,"column":703}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":235,"column":0},"generated":{"line":1,"column":713}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":235,"column":0},"generated":{"line":1,"column":718}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":235,"column":0},"generated":{"line":1,"column":731}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":244,"column":0},"generated":{"line":1,"column":733}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":244,"column":0},"generated":{"line":1,"column":738}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":244,"column":0},"generated":{"line":1,"column":745}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":246,"column":0},"generated":{"line":1,"column":748}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":246,"column":0},"generated":{"line":1,"column":753}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":246,"column":0},"generated":{"line":1,"column":765}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":247,"column":0},"generated":{"line":1,"column":768}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":247,"column":0},"generated":{"line":1,"column":773}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":247,"column":0},"generated":{"line":1,"column":782}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":247,"column":0},"generated":{"line":1,"column":787}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":247,"column":0},"generated":{"line":1,"column":793}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":800}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":805}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":817}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":248,"column":0},"generated":{"line":1,"column":819}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":249,"column":0},"generated":{"line":1,"column":822}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":249,"column":0},"generated":{"line":1,"column":827}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":839}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":844}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":852}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":854}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":864}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":869}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":875}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":881}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":883}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":894}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":899}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":250,"column":0},"generated":{"line":1,"column":905}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":252,"column":0},"generated":{"line":1,"column":913}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":252,"column":0},"generated":{"line":1,"column":918}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":252,"column":0},"generated":{"line":1,"column":931}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":264,"column":0},"generated":{"line":1,"column":955}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":264,"column":0},"generated":{"line":1,"column":967}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":264,"column":0},"generated":{"line":1,"column":976}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":266,"column":0},"generated":{"line":1,"column":979}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":266,"column":0},"generated":{"line":1,"column":983}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":266,"column":0},"generated":{"line":1,"column":985}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":267,"column":0},"generated":{"line":1,"column":988}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":267,"column":0},"generated":{"line":1,"column":990}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":268,"column":0},"generated":{"line":1,"column":993}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":268,"column":0},"generated":{"line":1,"column":995}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":268,"column":0},"generated":{"line":1,"column":1000}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":270,"column":0},"generated":{"line":1,"column":1008}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":270,"column":0},"generated":{"line":1,"column":1014}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":270,"column":0},"generated":{"line":1,"column":1022}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":272,"column":0},"generated":{"line":1,"column":1027}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":272,"column":0},"generated":{"line":1,"column":1029}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":272,"column":0},"generated":{"line":1,"column":1030}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1034}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1038}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1042}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1044}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1046}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1048}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1050}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":275,"column":0},"generated":{"line":1,"column":1057}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":276,"column":0},"generated":{"line":1,"column":1061}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":277,"column":0},"generated":{"line":1,"column":1062}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":277,"column":0},"generated":{"line":1,"column":1066}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":277,"column":0},"generated":{"line":1,"column":1068}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":277,"column":0},"generated":{"line":1,"column":1070}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":284,"column":0},"generated":{"line":1,"column":1073}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":279,"column":0},"generated":{"line":1,"column":1076}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":279,"column":0},"generated":{"line":1,"column":1093}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":281,"column":0},"generated":{"line":1,"column":1097}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":281,"column":0},"generated":{"line":1,"column":1099}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":281,"column":0},"generated":{"line":1,"column":1101}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":281,"column":0},"generated":{"line":1,"column":1112}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":284,"column":0},"generated":{"line":1,"column":1116}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":285,"column":0},"generated":{"line":1,"column":1118}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":286,"column":0},"generated":{"line":1,"column":1119}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":286,"column":0},"generated":{"line":1,"column":1121}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":286,"column":0},"generated":{"line":1,"column":1126}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1129}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1133}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1137}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1139}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":288,"column":0},"generated":{"line":1,"column":1141}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1150}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1152}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1154}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1156}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1158}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":290,"column":0},"generated":{"line":1,"column":1164}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":292,"column":0},"generated":{"line":1,"column":1168}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":292,"column":0},"generated":{"line":1,"column":1170}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":292,"column":0},"generated":{"line":1,"column":1172}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":292,"column":0},"generated":{"line":1,"column":1175}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":297,"column":0},"generated":{"line":1,"column":1178}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":297,"column":0},"generated":{"line":1,"column":1183}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":297,"column":0},"generated":{"line":1,"column":1190}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1192}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1197}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":298,"column":0},"generated":{"line":1,"column":1205}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":326,"column":0},"generated":{"line":1,"column":1208}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":326,"column":0},"generated":{"line":1,"column":1223}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":326,"column":0},"generated":{"line":1,"column":1232}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":340,"column":0},"generated":{"line":1,"column":1235}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":330,"column":0},"generated":{"line":1,"column":1241}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":330,"column":0},"generated":{"line":1,"column":1258}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":332,"column":0},"generated":{"line":1,"column":1262}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":328,"column":0},"generated":{"line":1,"column":1264}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":328,"column":0},"generated":{"line":1,"column":1265}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":328,"column":0},"generated":{"line":1,"column":1278}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":328,"column":0},"generated":{"line":1,"column":1290}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":328,"column":0},"generated":{"line":1,"column":1301}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":332,"column":0},"generated":{"line":1,"column":1312}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":332,"column":0},"generated":{"line":1,"column":1320}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1324}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1327}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1330}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":335,"column":0},"generated":{"line":1,"column":1332}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":337,"column":0},"generated":{"line":1,"column":1336}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":337,"column":0},"generated":{"line":1,"column":1341}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":337,"column":0},"generated":{"line":1,"column":1354}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":340,"column":0},"generated":{"line":1,"column":1357}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1363}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1380}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1389}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":356,"column":0},"generated":{"line":1,"column":1391}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":360,"column":0},"generated":{"line":1,"column":1394}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1401}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1403}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1420}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1422}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1424}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":358,"column":0},"generated":{"line":1,"column":1429}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":360,"column":0},"generated":{"line":1,"column":1436}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1442}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1463}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1472}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1474}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1476}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":378,"column":0},"generated":{"line":1,"column":1478}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":382,"column":0},"generated":{"line":1,"column":1481}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1488}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1490}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1511}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1513}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1515}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1517}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1519}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":380,"column":0},"generated":{"line":1,"column":1524}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":382,"column":0},"generated":{"line":1,"column":1531}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1537}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1553}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1562}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1564}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1566}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1568}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":405,"column":0},"generated":{"line":1,"column":1570}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1573}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1580}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1582}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1598}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1600}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1602}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1604}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1606}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1608}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":407,"column":0},"generated":{"line":1,"column":1613}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1621}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1626}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":421,"column":0},"generated":{"line":1,"column":1635}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1638}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1645}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1650}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1663}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1668}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1674}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1676}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1681}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1693}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":423,"column":0},"generated":{"line":1,"column":1698}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1713}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1718}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1727}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1729}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1731}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1733}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1735}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1737}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":444,"column":0},"generated":{"line":1,"column":1739}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":448,"column":0},"generated":{"line":1,"column":1742}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1749}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1751}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1756}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1758}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1760}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1762}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1764}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1766}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1768}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1770}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":446,"column":0},"generated":{"line":1,"column":1775}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":448,"column":0},"generated":{"line":1,"column":1782}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":457,"column":0},"generated":{"line":1,"column":1788}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":457,"column":0},"generated":{"line":1,"column":1796}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":460,"column":0},"generated":{"line":1,"column":1807}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":460,"column":0},"generated":{"line":1,"column":1812}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":460,"column":0},"generated":{"line":1,"column":1818}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":460,"column":0},"generated":{"line":1,"column":1833}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":462,"column":0},"generated":{"line":1,"column":1840}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":462,"column":0},"generated":{"line":1,"column":1845}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":462,"column":0},"generated":{"line":1,"column":1851}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":462,"column":0},"generated":{"line":1,"column":1869}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":465,"column":0},"generated":{"line":1,"column":1872}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":465,"column":0},"generated":{"line":1,"column":1877}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":465,"column":0},"generated":{"line":1,"column":1890}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":466,"column":0},"generated":{"line":1,"column":1892}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":466,"column":0},"generated":{"line":1,"column":1897}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":466,"column":0},"generated":{"line":1,"column":1908}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":467,"column":0},"generated":{"line":1,"column":1910}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":467,"column":0},"generated":{"line":1,"column":1915}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":467,"column":0},"generated":{"line":1,"column":1927}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":467,"column":0},"generated":{"line":1,"column":1934}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":468,"column":0},"generated":{"line":1,"column":1936}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":468,"column":0},"generated":{"line":1,"column":1941}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":468,"column":0},"generated":{"line":1,"column":1954}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":470,"column":0},"generated":{"line":1,"column":1959}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":470,"column":0},"generated":{"line":1,"column":1964}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":470,"column":0},"generated":{"line":1,"column":1971}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":471,"column":0},"generated":{"line":1,"column":1974}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":471,"column":0},"generated":{"line":1,"column":1979}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":471,"column":0},"generated":{"line":1,"column":1987}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":473,"column":0},"generated":{"line":1,"column":1990}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":473,"column":0},"generated":{"line":1,"column":1992}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":473,"column":0},"generated":{"line":1,"column":2002}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":473,"column":0},"generated":{"line":1,"column":2010}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":473,"column":0},"generated":{"line":1,"column":2015}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2022}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2027}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2036}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2038}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2040}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2042}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2044}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":493,"column":0},"generated":{"line":1,"column":2046}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":497,"column":0},"generated":{"line":1,"column":2049}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2056}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2058}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2063}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2065}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2067}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2069}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2071}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2073}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2075}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":495,"column":0},"generated":{"line":1,"column":2080}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":497,"column":0},"generated":{"line":1,"column":2087}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2093}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2105}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2114}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2116}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2118}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2120}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2122}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2124}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":520,"column":0},"generated":{"line":1,"column":2126}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2129}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2136}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2138}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2150}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2152}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2154}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2156}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2158}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2160}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2162}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2164}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":522,"column":0},"generated":{"line":1,"column":2169}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":542,"column":0},"generated":{"line":1,"column":2177}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":542,"column":0},"generated":{"line":1,"column":2189}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":542,"column":0},"generated":{"line":1,"column":2198}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":542,"column":0},"generated":{"line":1,"column":2200}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":542,"column":0},"generated":{"line":1,"column":2202}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":544,"column":0},"generated":{"line":1,"column":2205}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":544,"column":0},"generated":{"line":1,"column":2212}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":544,"column":0},"generated":{"line":1,"column":2214}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":544,"column":0},"generated":{"line":1,"column":2226}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":544,"column":0},"generated":{"line":1,"column":2228}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":544,"column":0},"generated":{"line":1,"column":2230}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":544,"column":0},"generated":{"line":1,"column":2232}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":544,"column":0},"generated":{"line":1,"column":2237}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":565,"column":0},"generated":{"line":1,"column":2245}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":565,"column":0},"generated":{"line":1,"column":2254}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":565,"column":0},"generated":{"line":1,"column":2263}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":565,"column":0},"generated":{"line":1,"column":2265}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":565,"column":0},"generated":{"line":1,"column":2267}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":565,"column":0},"generated":{"line":1,"column":2269}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":565,"column":0},"generated":{"line":1,"column":2271}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":565,"column":0},"generated":{"line":1,"column":2273}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":565,"column":0},"generated":{"line":1,"column":2275}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":567,"column":0},"generated":{"line":1,"column":2278}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":567,"column":0},"generated":{"line":1,"column":2285}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":567,"column":0},"generated":{"line":1,"column":2287}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":567,"column":0},"generated":{"line":1,"column":2296}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":567,"column":0},"generated":{"line":1,"column":2298}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":567,"column":0},"generated":{"line":1,"column":2300}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":567,"column":0},"generated":{"line":1,"column":2302}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":567,"column":0},"generated":{"line":1,"column":2304}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":567,"column":0},"generated":{"line":1,"column":2306}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":567,"column":0},"generated":{"line":1,"column":2308}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":567,"column":0},"generated":{"line":1,"column":2310}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":567,"column":0},"generated":{"line":1,"column":2315}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":587,"column":0},"generated":{"line":1,"column":2323}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":587,"column":0},"generated":{"line":1,"column":2335}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":587,"column":0},"generated":{"line":1,"column":2344}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":587,"column":0},"generated":{"line":1,"column":2346}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":587,"column":0},"generated":{"line":1,"column":2348}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":587,"column":0},"generated":{"line":1,"column":2350}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":587,"column":0},"generated":{"line":1,"column":2352}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":587,"column":0},"generated":{"line":1,"column":2354}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":587,"column":0},"generated":{"line":1,"column":2356}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":591,"column":0},"generated":{"line":1,"column":2359}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":589,"column":0},"generated":{"line":1,"column":2366}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":589,"column":0},"generated":{"line":1,"column":2368}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":589,"column":0},"generated":{"line":1,"column":2380}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":589,"column":0},"generated":{"line":1,"column":2382}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":589,"column":0},"generated":{"line":1,"column":2384}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":589,"column":0},"generated":{"line":1,"column":2386}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":589,"column":0},"generated":{"line":1,"column":2388}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":589,"column":0},"generated":{"line":1,"column":2390}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":589,"column":0},"generated":{"line":1,"column":2392}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":589,"column":0},"generated":{"line":1,"column":2394}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":589,"column":0},"generated":{"line":1,"column":2399}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":591,"column":0},"generated":{"line":1,"column":2406}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":606,"column":0},"generated":{"line":1,"column":2412}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":606,"column":0},"generated":{"line":1,"column":2422}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":606,"column":0},"generated":{"line":1,"column":2431}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":606,"column":0},"generated":{"line":1,"column":2433}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":606,"column":0},"generated":{"line":1,"column":2435}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":608,"column":0},"generated":{"line":1,"column":2438}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":608,"column":0},"generated":{"line":1,"column":2445}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":608,"column":0},"generated":{"line":1,"column":2447}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":608,"column":0},"generated":{"line":1,"column":2457}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":608,"column":0},"generated":{"line":1,"column":2459}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":608,"column":0},"generated":{"line":1,"column":2461}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":608,"column":0},"generated":{"line":1,"column":2463}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":608,"column":0},"generated":{"line":1,"column":2468}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":625,"column":0},"generated":{"line":1,"column":2476}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":625,"column":0},"generated":{"line":1,"column":2493}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":625,"column":0},"generated":{"line":1,"column":2502}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":625,"column":0},"generated":{"line":1,"column":2504}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":625,"column":0},"generated":{"line":1,"column":2506}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":625,"column":0},"generated":{"line":1,"column":2508}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":627,"column":0},"generated":{"line":1,"column":2511}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":627,"column":0},"generated":{"line":1,"column":2518}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":627,"column":0},"generated":{"line":1,"column":2520}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":627,"column":0},"generated":{"line":1,"column":2537}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":627,"column":0},"generated":{"line":1,"column":2539}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":627,"column":0},"generated":{"line":1,"column":2541}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":627,"column":0},"generated":{"line":1,"column":2543}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":627,"column":0},"generated":{"line":1,"column":2545}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":627,"column":0},"generated":{"line":1,"column":2550}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":644,"column":0},"generated":{"line":1,"column":2558}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":644,"column":0},"generated":{"line":1,"column":2573}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":644,"column":0},"generated":{"line":1,"column":2582}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":644,"column":0},"generated":{"line":1,"column":2584}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":644,"column":0},"generated":{"line":1,"column":2586}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":644,"column":0},"generated":{"line":1,"column":2588}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":644,"column":0},"generated":{"line":1,"column":2590}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":646,"column":0},"generated":{"line":1,"column":2593}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":646,"column":0},"generated":{"line":1,"column":2600}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":646,"column":0},"generated":{"line":1,"column":2602}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":646,"column":0},"generated":{"line":1,"column":2617}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":646,"column":0},"generated":{"line":1,"column":2619}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":646,"column":0},"generated":{"line":1,"column":2621}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":646,"column":0},"generated":{"line":1,"column":2623}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":646,"column":0},"generated":{"line":1,"column":2625}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":646,"column":0},"generated":{"line":1,"column":2627}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":646,"column":0},"generated":{"line":1,"column":2632}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":662,"column":0},"generated":{"line":1,"column":2640}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":662,"column":0},"generated":{"line":1,"column":2660}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":662,"column":0},"generated":{"line":1,"column":2669}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":662,"column":0},"generated":{"line":1,"column":2671}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":662,"column":0},"generated":{"line":1,"column":2673}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":664,"column":0},"generated":{"line":1,"column":2676}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":664,"column":0},"generated":{"line":1,"column":2683}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":664,"column":0},"generated":{"line":1,"column":2685}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":664,"column":0},"generated":{"line":1,"column":2705}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":664,"column":0},"generated":{"line":1,"column":2707}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":664,"column":0},"generated":{"line":1,"column":2709}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":664,"column":0},"generated":{"line":1,"column":2711}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":664,"column":0},"generated":{"line":1,"column":2716}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":682,"column":0},"generated":{"line":1,"column":2724}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":682,"column":0},"generated":{"line":1,"column":2746}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":682,"column":0},"generated":{"line":1,"column":2755}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":682,"column":0},"generated":{"line":1,"column":2757}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":682,"column":0},"generated":{"line":1,"column":2759}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":682,"column":0},"generated":{"line":1,"column":2761}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":682,"column":0},"generated":{"line":1,"column":2763}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":682,"column":0},"generated":{"line":1,"column":2765}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":684,"column":0},"generated":{"line":1,"column":2768}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":684,"column":0},"generated":{"line":1,"column":2775}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":684,"column":0},"generated":{"line":1,"column":2777}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":684,"column":0},"generated":{"line":1,"column":2799}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":684,"column":0},"generated":{"line":1,"column":2801}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":684,"column":0},"generated":{"line":1,"column":2803}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":684,"column":0},"generated":{"line":1,"column":2805}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":684,"column":0},"generated":{"line":1,"column":2807}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":684,"column":0},"generated":{"line":1,"column":2809}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":684,"column":0},"generated":{"line":1,"column":2811}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":684,"column":0},"generated":{"line":1,"column":2816}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":699,"column":0},"generated":{"line":1,"column":2824}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":699,"column":0},"generated":{"line":1,"column":2834}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":699,"column":0},"generated":{"line":1,"column":2843}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":699,"column":0},"generated":{"line":1,"column":2845}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":701,"column":0},"generated":{"line":1,"column":2848}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":701,"column":0},"generated":{"line":1,"column":2855}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":701,"column":0},"generated":{"line":1,"column":2857}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":701,"column":0},"generated":{"line":1,"column":2867}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":701,"column":0},"generated":{"line":1,"column":2869}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":701,"column":0},"generated":{"line":1,"column":2871}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":701,"column":0},"generated":{"line":1,"column":2876}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":717,"column":0},"generated":{"line":1,"column":2884}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":717,"column":0},"generated":{"line":1,"column":2901}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":717,"column":0},"generated":{"line":1,"column":2910}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":717,"column":0},"generated":{"line":1,"column":2912}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":717,"column":0},"generated":{"line":1,"column":2914}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2917}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2924}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2926}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2943}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2945}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2947}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2949}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":719,"column":0},"generated":{"line":1,"column":2954}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":738,"column":0},"generated":{"line":1,"column":2962}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":738,"column":0},"generated":{"line":1,"column":2972}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":738,"column":0},"generated":{"line":1,"column":2981}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":738,"column":0},"generated":{"line":1,"column":2983}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":738,"column":0},"generated":{"line":1,"column":2985}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":738,"column":0},"generated":{"line":1,"column":2987}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":740,"column":0},"generated":{"line":1,"column":2990}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":740,"column":0},"generated":{"line":1,"column":2997}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":740,"column":0},"generated":{"line":1,"column":2999}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":740,"column":0},"generated":{"line":1,"column":3009}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":740,"column":0},"generated":{"line":1,"column":3011}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":740,"column":0},"generated":{"line":1,"column":3013}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":740,"column":0},"generated":{"line":1,"column":3015}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":740,"column":0},"generated":{"line":1,"column":3017}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":740,"column":0},"generated":{"line":1,"column":3022}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":760,"column":0},"generated":{"line":1,"column":3030}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":760,"column":0},"generated":{"line":1,"column":3047}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":760,"column":0},"generated":{"line":1,"column":3056}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":760,"column":0},"generated":{"line":1,"column":3058}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":760,"column":0},"generated":{"line":1,"column":3060}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":760,"column":0},"generated":{"line":1,"column":3062}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":760,"column":0},"generated":{"line":1,"column":3064}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":762,"column":0},"generated":{"line":1,"column":3067}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":762,"column":0},"generated":{"line":1,"column":3074}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":762,"column":0},"generated":{"line":1,"column":3076}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":762,"column":0},"generated":{"line":1,"column":3093}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":762,"column":0},"generated":{"line":1,"column":3095}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":762,"column":0},"generated":{"line":1,"column":3097}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":762,"column":0},"generated":{"line":1,"column":3099}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":762,"column":0},"generated":{"line":1,"column":3101}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":762,"column":0},"generated":{"line":1,"column":3103}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":762,"column":0},"generated":{"line":1,"column":3108}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":782,"column":0},"generated":{"line":1,"column":3116}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":782,"column":0},"generated":{"line":1,"column":3127}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":782,"column":0},"generated":{"line":1,"column":3136}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":782,"column":0},"generated":{"line":1,"column":3138}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":782,"column":0},"generated":{"line":1,"column":3140}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":782,"column":0},"generated":{"line":1,"column":3142}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":786,"column":0},"generated":{"line":1,"column":3145}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":784,"column":0},"generated":{"line":1,"column":3152}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":784,"column":0},"generated":{"line":1,"column":3154}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":784,"column":0},"generated":{"line":1,"column":3165}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":784,"column":0},"generated":{"line":1,"column":3167}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":784,"column":0},"generated":{"line":1,"column":3169}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":784,"column":0},"generated":{"line":1,"column":3171}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":784,"column":0},"generated":{"line":1,"column":3173}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":784,"column":0},"generated":{"line":1,"column":3178}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":786,"column":0},"generated":{"line":1,"column":3185}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":807,"column":0},"generated":{"line":1,"column":3191}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":807,"column":0},"generated":{"line":1,"column":3201}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":807,"column":0},"generated":{"line":1,"column":3210}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":807,"column":0},"generated":{"line":1,"column":3212}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":807,"column":0},"generated":{"line":1,"column":3214}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":807,"column":0},"generated":{"line":1,"column":3216}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":807,"column":0},"generated":{"line":1,"column":3218}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":811,"column":0},"generated":{"line":1,"column":3221}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":809,"column":0},"generated":{"line":1,"column":3228}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":809,"column":0},"generated":{"line":1,"column":3230}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":809,"column":0},"generated":{"line":1,"column":3240}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":809,"column":0},"generated":{"line":1,"column":3242}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":809,"column":0},"generated":{"line":1,"column":3244}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":809,"column":0},"generated":{"line":1,"column":3246}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":809,"column":0},"generated":{"line":1,"column":3248}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":809,"column":0},"generated":{"line":1,"column":3250}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":809,"column":0},"generated":{"line":1,"column":3255}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":811,"column":0},"generated":{"line":1,"column":3262}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":828,"column":0},"generated":{"line":1,"column":3268}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":828,"column":0},"generated":{"line":1,"column":3281}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":828,"column":0},"generated":{"line":1,"column":3290}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":828,"column":0},"generated":{"line":1,"column":3292}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":828,"column":0},"generated":{"line":1,"column":3294}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":828,"column":0},"generated":{"line":1,"column":3296}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":830,"column":0},"generated":{"line":1,"column":3299}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":830,"column":0},"generated":{"line":1,"column":3306}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":830,"column":0},"generated":{"line":1,"column":3308}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":830,"column":0},"generated":{"line":1,"column":3321}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":830,"column":0},"generated":{"line":1,"column":3323}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":830,"column":0},"generated":{"line":1,"column":3325}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":830,"column":0},"generated":{"line":1,"column":3327}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":830,"column":0},"generated":{"line":1,"column":3329}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":830,"column":0},"generated":{"line":1,"column":3334}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3342}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3362}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3371}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3373}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3375}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3377}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":848,"column":0},"generated":{"line":1,"column":3379}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":850,"column":0},"generated":{"line":1,"column":3382}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":850,"column":0},"generated":{"line":1,"column":3389}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":850,"column":0},"generated":{"line":1,"column":3391}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":850,"column":0},"generated":{"line":1,"column":3411}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":850,"column":0},"generated":{"line":1,"column":3413}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":850,"column":0},"generated":{"line":1,"column":3415}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":850,"column":0},"generated":{"line":1,"column":3417}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":850,"column":0},"generated":{"line":1,"column":3419}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":850,"column":0},"generated":{"line":1,"column":3421}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":850,"column":0},"generated":{"line":1,"column":3426}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":867,"column":0},"generated":{"line":1,"column":3434}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":867,"column":0},"generated":{"line":1,"column":3446}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":867,"column":0},"generated":{"line":1,"column":3455}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":867,"column":0},"generated":{"line":1,"column":3457}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":871,"column":0},"generated":{"line":1,"column":3460}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":869,"column":0},"generated":{"line":1,"column":3467}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":869,"column":0},"generated":{"line":1,"column":3469}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":869,"column":0},"generated":{"line":1,"column":3481}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":869,"column":0},"generated":{"line":1,"column":3483}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":869,"column":0},"generated":{"line":1,"column":3485}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":869,"column":0},"generated":{"line":1,"column":3490}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":871,"column":0},"generated":{"line":1,"column":3497}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":891,"column":0},"generated":{"line":1,"column":3503}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":891,"column":0},"generated":{"line":1,"column":3518}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":891,"column":0},"generated":{"line":1,"column":3527}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":891,"column":0},"generated":{"line":1,"column":3529}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":891,"column":0},"generated":{"line":1,"column":3531}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":891,"column":0},"generated":{"line":1,"column":3533}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":891,"column":0},"generated":{"line":1,"column":3535}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":891,"column":0},"generated":{"line":1,"column":3537}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":895,"column":0},"generated":{"line":1,"column":3540}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3547}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3549}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3564}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3566}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3568}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3570}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3572}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3574}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3576}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":893,"column":0},"generated":{"line":1,"column":3581}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":895,"column":0},"generated":{"line":1,"column":3588}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":911,"column":0},"generated":{"line":1,"column":3594}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":911,"column":0},"generated":{"line":1,"column":3606}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":911,"column":0},"generated":{"line":1,"column":3615}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":917,"column":0},"generated":{"line":1,"column":3618}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":913,"column":0},"generated":{"line":1,"column":3630}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":913,"column":0},"generated":{"line":1,"column":3634}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":913,"column":0},"generated":{"line":1,"column":3638}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":913,"column":0},"generated":{"line":1,"column":3641}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":1,"column":3644}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":1,"column":3649}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":915,"column":0},"generated":{"line":1,"column":3658}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":917,"column":0},"generated":{"line":1,"column":3660}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":935,"column":0},"generated":{"line":1,"column":3666}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":935,"column":0},"generated":{"line":1,"column":3681}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":935,"column":0},"generated":{"line":1,"column":3690}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":935,"column":0},"generated":{"line":1,"column":3692}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":943,"column":0},"generated":{"line":1,"column":3695}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":937,"column":0},"generated":{"line":1,"column":3707}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":937,"column":0},"generated":{"line":1,"column":3711}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":937,"column":0},"generated":{"line":1,"column":3715}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":937,"column":0},"generated":{"line":1,"column":3717}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":938,"column":0},"generated":{"line":1,"column":3725}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":938,"column":0},"generated":{"line":1,"column":3729}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":938,"column":0},"generated":{"line":1,"column":3733}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":938,"column":0},"generated":{"line":1,"column":3735}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":940,"column":0},"generated":{"line":1,"column":3738}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":940,"column":0},"generated":{"line":1,"column":3743}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":940,"column":0},"generated":{"line":1,"column":3756}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":941,"column":0},"generated":{"line":1,"column":3758}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":941,"column":0},"generated":{"line":1,"column":3763}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":941,"column":0},"generated":{"line":1,"column":3776}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":943,"column":0},"generated":{"line":1,"column":3778}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":960,"column":0},"generated":{"line":1,"column":3784}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":960,"column":0},"generated":{"line":1,"column":3797}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":960,"column":0},"generated":{"line":1,"column":3806}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":960,"column":0},"generated":{"line":1,"column":3808}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":960,"column":0},"generated":{"line":1,"column":3810}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":964,"column":0},"generated":{"line":1,"column":3813}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3820}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3822}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3835}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3837}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3839}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3841}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":962,"column":0},"generated":{"line":1,"column":3846}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":964,"column":0},"generated":{"line":1,"column":3853}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":983,"column":0},"generated":{"line":1,"column":3859}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":983,"column":0},"generated":{"line":1,"column":3879}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":983,"column":0},"generated":{"line":1,"column":3888}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":983,"column":0},"generated":{"line":1,"column":3890}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":983,"column":0},"generated":{"line":1,"column":3892}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":983,"column":0},"generated":{"line":1,"column":3894}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":987,"column":0},"generated":{"line":1,"column":3897}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":985,"column":0},"generated":{"line":1,"column":3904}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":985,"column":0},"generated":{"line":1,"column":3906}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":985,"column":0},"generated":{"line":1,"column":3926}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":985,"column":0},"generated":{"line":1,"column":3928}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":985,"column":0},"generated":{"line":1,"column":3930}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":985,"column":0},"generated":{"line":1,"column":3932}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":985,"column":0},"generated":{"line":1,"column":3934}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":985,"column":0},"generated":{"line":1,"column":3939}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":987,"column":0},"generated":{"line":1,"column":3946}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1008,"column":0},"generated":{"line":1,"column":3952}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1008,"column":0},"generated":{"line":1,"column":3975}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1008,"column":0},"generated":{"line":1,"column":3984}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1008,"column":0},"generated":{"line":1,"column":3986}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1008,"column":0},"generated":{"line":1,"column":3988}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1012,"column":0},"generated":{"line":1,"column":3991}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":3998}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":4000}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":4023}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":4025}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":4027}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":4029}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1010,"column":0},"generated":{"line":1,"column":4034}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1012,"column":0},"generated":{"line":1,"column":4041}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1029,"column":0},"generated":{"line":1,"column":4047}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1029,"column":0},"generated":{"line":1,"column":4071}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1029,"column":0},"generated":{"line":1,"column":4080}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1029,"column":0},"generated":{"line":1,"column":4082}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1029,"column":0},"generated":{"line":1,"column":4084}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1033,"column":0},"generated":{"line":1,"column":4087}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1031,"column":0},"generated":{"line":1,"column":4094}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1031,"column":0},"generated":{"line":1,"column":4096}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1031,"column":0},"generated":{"line":1,"column":4120}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1031,"column":0},"generated":{"line":1,"column":4122}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1031,"column":0},"generated":{"line":1,"column":4124}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1031,"column":0},"generated":{"line":1,"column":4126}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1031,"column":0},"generated":{"line":1,"column":4131}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1033,"column":0},"generated":{"line":1,"column":4138}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1050,"column":0},"generated":{"line":1,"column":4144}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1050,"column":0},"generated":{"line":1,"column":4175}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1050,"column":0},"generated":{"line":1,"column":4184}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1050,"column":0},"generated":{"line":1,"column":4186}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1054,"column":0},"generated":{"line":1,"column":4189}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1052,"column":0},"generated":{"line":1,"column":4196}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1052,"column":0},"generated":{"line":1,"column":4198}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1052,"column":0},"generated":{"line":1,"column":4229}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1052,"column":0},"generated":{"line":1,"column":4231}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1052,"column":0},"generated":{"line":1,"column":4233}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1052,"column":0},"generated":{"line":1,"column":4238}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1054,"column":0},"generated":{"line":1,"column":4245}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1072,"column":0},"generated":{"line":1,"column":4251}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1072,"column":0},"generated":{"line":1,"column":4272}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1072,"column":0},"generated":{"line":1,"column":4281}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1072,"column":0},"generated":{"line":1,"column":4283}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1072,"column":0},"generated":{"line":1,"column":4285}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1076,"column":0},"generated":{"line":1,"column":4288}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1074,"column":0},"generated":{"line":1,"column":4295}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1074,"column":0},"generated":{"line":1,"column":4297}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1074,"column":0},"generated":{"line":1,"column":4318}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1074,"column":0},"generated":{"line":1,"column":4320}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1074,"column":0},"generated":{"line":1,"column":4322}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1074,"column":0},"generated":{"line":1,"column":4324}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1074,"column":0},"generated":{"line":1,"column":4329}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1076,"column":0},"generated":{"line":1,"column":4336}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1096,"column":0},"generated":{"line":1,"column":4342}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1096,"column":0},"generated":{"line":1,"column":4366}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1096,"column":0},"generated":{"line":1,"column":4375}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1096,"column":0},"generated":{"line":1,"column":4377}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1096,"column":0},"generated":{"line":1,"column":4379}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1096,"column":0},"generated":{"line":1,"column":4381}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1096,"column":0},"generated":{"line":1,"column":4383}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1096,"column":0},"generated":{"line":1,"column":4385}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1100,"column":0},"generated":{"line":1,"column":4388}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4395}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4397}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4421}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4423}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4425}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4427}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4429}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4431}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4433}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1098,"column":0},"generated":{"line":1,"column":4438}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1100,"column":0},"generated":{"line":1,"column":4445}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1119,"column":0},"generated":{"line":1,"column":4451}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1119,"column":0},"generated":{"line":1,"column":4459}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1119,"column":0},"generated":{"line":1,"column":4468}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1119,"column":0},"generated":{"line":1,"column":4470}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1119,"column":0},"generated":{"line":1,"column":4472}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1119,"column":0},"generated":{"line":1,"column":4474}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1123,"column":0},"generated":{"line":1,"column":4477}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1121,"column":0},"generated":{"line":1,"column":4484}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1121,"column":0},"generated":{"line":1,"column":4486}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1121,"column":0},"generated":{"line":1,"column":4494}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1121,"column":0},"generated":{"line":1,"column":4496}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1121,"column":0},"generated":{"line":1,"column":4498}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1121,"column":0},"generated":{"line":1,"column":4500}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1121,"column":0},"generated":{"line":1,"column":4502}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1121,"column":0},"generated":{"line":1,"column":4507}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1123,"column":0},"generated":{"line":1,"column":4514}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1143,"column":0},"generated":{"line":1,"column":4520}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1143,"column":0},"generated":{"line":1,"column":4532}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1143,"column":0},"generated":{"line":1,"column":4541}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1143,"column":0},"generated":{"line":1,"column":4543}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1143,"column":0},"generated":{"line":1,"column":4545}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1143,"column":0},"generated":{"line":1,"column":4547}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1143,"column":0},"generated":{"line":1,"column":4549}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1143,"column":0},"generated":{"line":1,"column":4551}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1147,"column":0},"generated":{"line":1,"column":4554}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1145,"column":0},"generated":{"line":1,"column":4561}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1145,"column":0},"generated":{"line":1,"column":4563}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1145,"column":0},"generated":{"line":1,"column":4575}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1145,"column":0},"generated":{"line":1,"column":4577}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1145,"column":0},"generated":{"line":1,"column":4579}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1145,"column":0},"generated":{"line":1,"column":4581}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1145,"column":0},"generated":{"line":1,"column":4583}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1145,"column":0},"generated":{"line":1,"column":4585}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1145,"column":0},"generated":{"line":1,"column":4587}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1145,"column":0},"generated":{"line":1,"column":4592}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1147,"column":0},"generated":{"line":1,"column":4599}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4605}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4618}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4627}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1162,"column":0},"generated":{"line":1,"column":4629}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1164,"column":0},"generated":{"line":1,"column":4632}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1164,"column":0},"generated":{"line":1,"column":4639}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1164,"column":0},"generated":{"line":1,"column":4641}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1164,"column":0},"generated":{"line":1,"column":4654}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1164,"column":0},"generated":{"line":1,"column":4656}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1164,"column":0},"generated":{"line":1,"column":4658}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1164,"column":0},"generated":{"line":1,"column":4663}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4671}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4684}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4693}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1179,"column":0},"generated":{"line":1,"column":4695}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4698}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4705}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4707}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4720}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4722}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4724}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1181,"column":0},"generated":{"line":1,"column":4729}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1199,"column":0},"generated":{"line":1,"column":4737}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1199,"column":0},"generated":{"line":1,"column":4751}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1199,"column":0},"generated":{"line":1,"column":4760}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1199,"column":0},"generated":{"line":1,"column":4762}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1199,"column":0},"generated":{"line":1,"column":4764}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1199,"column":0},"generated":{"line":1,"column":4766}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1201,"column":0},"generated":{"line":1,"column":4769}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1201,"column":0},"generated":{"line":1,"column":4776}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1201,"column":0},"generated":{"line":1,"column":4778}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1201,"column":0},"generated":{"line":1,"column":4792}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1201,"column":0},"generated":{"line":1,"column":4794}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1201,"column":0},"generated":{"line":1,"column":4796}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1201,"column":0},"generated":{"line":1,"column":4798}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1201,"column":0},"generated":{"line":1,"column":4800}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1201,"column":0},"generated":{"line":1,"column":4805}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4813}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4831}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4840}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4842}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4844}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4846}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1232,"column":0},"generated":{"line":1,"column":4848}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1236,"column":0},"generated":{"line":1,"column":4851}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1234,"column":0},"generated":{"line":1,"column":4858}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1234,"column":0},"generated":{"line":1,"column":4860}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1234,"column":0},"generated":{"line":1,"column":4878}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1234,"column":0},"generated":{"line":1,"column":4880}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1234,"column":0},"generated":{"line":1,"column":4882}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1234,"column":0},"generated":{"line":1,"column":4884}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1234,"column":0},"generated":{"line":1,"column":4886}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1234,"column":0},"generated":{"line":1,"column":4888}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1234,"column":0},"generated":{"line":1,"column":4893}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1236,"column":0},"generated":{"line":1,"column":4900}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1252,"column":0},"generated":{"line":1,"column":4906}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1252,"column":0},"generated":{"line":1,"column":4919}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1252,"column":0},"generated":{"line":1,"column":4928}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1252,"column":0},"generated":{"line":1,"column":4930}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1252,"column":0},"generated":{"line":1,"column":4932}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1254,"column":0},"generated":{"line":1,"column":4935}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1254,"column":0},"generated":{"line":1,"column":4942}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1254,"column":0},"generated":{"line":1,"column":4944}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1254,"column":0},"generated":{"line":1,"column":4957}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1254,"column":0},"generated":{"line":1,"column":4959}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1254,"column":0},"generated":{"line":1,"column":4961}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1254,"column":0},"generated":{"line":1,"column":4963}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1254,"column":0},"generated":{"line":1,"column":4968}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":4976}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":4989}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":4998}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":5000}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1270,"column":0},"generated":{"line":1,"column":5002}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1272,"column":0},"generated":{"line":1,"column":5005}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1272,"column":0},"generated":{"line":1,"column":5012}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1272,"column":0},"generated":{"line":1,"column":5014}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1272,"column":0},"generated":{"line":1,"column":5027}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1272,"column":0},"generated":{"line":1,"column":5029}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1272,"column":0},"generated":{"line":1,"column":5031}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1272,"column":0},"generated":{"line":1,"column":5033}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1272,"column":0},"generated":{"line":1,"column":5038}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1291,"column":0},"generated":{"line":1,"column":5046}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1291,"column":0},"generated":{"line":1,"column":5060}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1291,"column":0},"generated":{"line":1,"column":5069}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1291,"column":0},"generated":{"line":1,"column":5071}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1291,"column":0},"generated":{"line":1,"column":5073}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1291,"column":0},"generated":{"line":1,"column":5075}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1291,"column":0},"generated":{"line":1,"column":5077}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1293,"column":0},"generated":{"line":1,"column":5080}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1293,"column":0},"generated":{"line":1,"column":5087}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1293,"column":0},"generated":{"line":1,"column":5089}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1293,"column":0},"generated":{"line":1,"column":5103}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1293,"column":0},"generated":{"line":1,"column":5105}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1293,"column":0},"generated":{"line":1,"column":5107}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1293,"column":0},"generated":{"line":1,"column":5109}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1293,"column":0},"generated":{"line":1,"column":5111}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1293,"column":0},"generated":{"line":1,"column":5113}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1293,"column":0},"generated":{"line":1,"column":5118}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1298,"column":0},"generated":{"line":1,"column":5128}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1298,"column":0},"generated":{"line":1,"column":5135}},{"source":"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js","original":{"line":1298,"column":0},"generated":{"line":1,"column":5143}}],"sources":{"node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar DynamicTilemapLayerRender = require('./DynamicTilemapLayerRender');\r\nvar GameObject = require('../../gameobjects/GameObject');\r\nvar TilemapComponents = require('../components');\r\n\r\n/**\r\n * @classdesc\r\n * A Dynamic Tilemap Layer is a Game Object that renders LayerData from a Tilemap when used in combination\r\n * with one, or more, Tilesets.\r\n *\r\n * A Dynamic Tilemap Layer trades some speed for being able to apply powerful effects. Unlike a\r\n * Static Tilemap Layer, you can apply per-tile effects like tint or alpha, and you can change the\r\n * tiles in a DynamicTilemapLayer.\r\n * \r\n * Use this over a Static Tilemap Layer when you need those features.\r\n *\r\n * @class DynamicTilemapLayer\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScaleMode\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {Phaser.Tilemaps.Tilemap} tilemap - The Tilemap this layer is a part of.\r\n * @param {integer} layerIndex - The index of the LayerData associated with this layer.\r\n * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n */\r\nvar DynamicTilemapLayer = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.ComputedSize,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScaleMode,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Components.ScrollFactor,\r\n        DynamicTilemapLayerRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function DynamicTilemapLayer (scene, tilemap, layerIndex, tileset, x, y)\r\n    {\r\n        GameObject.call(this, scene, 'DynamicTilemapLayer');\r\n\r\n        /**\r\n         * Used internally by physics system to perform fast type checks.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#isTilemap\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.isTilemap = true;\r\n\r\n        /**\r\n         * The Tilemap that this layer is a part of.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilemap\r\n         * @type {Phaser.Tilemaps.Tilemap}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilemap = tilemap;\r\n\r\n        /**\r\n         * The index of the LayerData associated with this layer.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#layerIndex\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.layerIndex = layerIndex;\r\n\r\n        /**\r\n         * The LayerData associated with this layer. LayerData can only be associated with one\r\n         * tilemap layer.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#layer\r\n         * @type {Phaser.Tilemaps.LayerData}\r\n         * @since 3.0.0\r\n         */\r\n        this.layer = tilemap.layers[layerIndex];\r\n\r\n        // Link the LayerData with this static tilemap layer\r\n        this.layer.tilemapLayer = this;\r\n\r\n        /**\r\n         * The Tileset/s associated with this layer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array of Tileset objects, previously it was a single reference.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tileset\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileset = [];\r\n\r\n        /**\r\n         * Used internally with the canvas render. This holds the tiles that are visible within the\r\n         * camera.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#culledTiles\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.culledTiles = [];\r\n\r\n        /**\r\n         * You can control if the Cameras should cull tiles before rendering them or not.\r\n         * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n         *\r\n         * However, there are some instances when you may wish to disable this, and toggling this flag allows\r\n         * you to do so. Also see `setSkipCull` for a chainable method that does the same thing.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#skipCull\r\n         * @type {boolean}\r\n         * @since 3.11.0\r\n         */\r\n        this.skipCull = false;\r\n\r\n        /**\r\n         * The total number of tiles drawn by the renderer in the last frame.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesDrawn\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.tilesDrawn = 0;\r\n\r\n        /**\r\n         * The total number of tiles in this layer. Updated every frame.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesTotal\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.tilesTotal = this.layer.width * this.layer.height;\r\n\r\n        /**\r\n         * The amount of extra tiles to add into the cull rectangle when calculating its horizontal size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingX\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n        this.cullPaddingX = 1;\r\n\r\n        /**\r\n         * The amount of extra tiles to add into the cull rectangle when calculating its vertical size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingY\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n        this.cullPaddingY = 1;\r\n\r\n        /**\r\n         * The callback that is invoked when the tiles are culled.\r\n         *\r\n         * By default it will call `TilemapComponents.CullTiles` but you can override this to call any function you like.\r\n         *\r\n         * It will be sent 3 arguments:\r\n         *\r\n         * 1. The Phaser.Tilemaps.LayerData object for this Layer\r\n         * 2. The Camera that is culling the layer. You can check its `dirty` property to see if it has changed since the last cull.\r\n         * 3. A reference to the `culledTiles` array, which should be used to store the tiles you want rendered.\r\n         *\r\n         * See the `TilemapComponents.CullTiles` source code for details on implementing your own culling system.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullCallback\r\n         * @type {function}\r\n         * @since 3.11.0\r\n         */\r\n        this.cullCallback = TilemapComponents.CullTiles;\r\n\r\n        /**\r\n         * The rendering (draw) order of the tiles in this layer.\r\n         * \r\n         * The default is 0 which is 'right-down', meaning it will draw the tiles starting from the top-left,\r\n         * drawing to the right and then moving down to the next row.\r\n         * \r\n         * The draw orders are:\r\n         * \r\n         * 0 = right-down\r\n         * 1 = left-down\r\n         * 2 = right-up\r\n         * 3 = left-up\r\n         * \r\n         * This can be changed via the `setRenderOrder` method.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#_renderOrder\r\n         * @type {integer}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._renderOrder = 0;\r\n\r\n        /**\r\n         * An array holding the mapping between the tile indexes and the tileset they belong to.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#gidMap\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.14.0\r\n         */\r\n        this.gidMap = [];\r\n\r\n        this.setTilesets(tileset);\r\n        this.setAlpha(this.layer.alpha);\r\n        this.setPosition(x, y);\r\n        this.setOrigin();\r\n        this.setSize(tilemap.tileWidth * this.layer.width, tilemap.tileHeight * this.layer.height);\r\n\r\n        this.initPipeline('TextureTintPipeline');\r\n    },\r\n\r\n    /**\r\n     * Populates the internal `tileset` array with the Tileset references this Layer requires for rendering.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTilesets\r\n     * @private\r\n     * @since 3.14.0\r\n     * \r\n     * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n     */\r\n    setTilesets: function (tilesets)\r\n    {\r\n        var gidMap = [];\r\n        var setList = [];\r\n        var map = this.tilemap;\r\n\r\n        if (!Array.isArray(tilesets))\r\n        {\r\n            tilesets = [ tilesets ];\r\n        }\r\n\r\n        for (var i = 0; i < tilesets.length; i++)\r\n        {\r\n            var tileset = tilesets[i];\r\n\r\n            if (typeof tileset === 'string')\r\n            {\r\n                tileset = map.getTileset(tileset);\r\n            }\r\n\r\n            if (tileset)\r\n            {\r\n                setList.push(tileset);\r\n\r\n                var s = tileset.firstgid;\r\n\r\n                for (var t = 0; t < tileset.total; t++)\r\n                {\r\n                    gidMap[s + t] = tileset;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.gidMap = gidMap;\r\n        this.tileset = setList;\r\n    },\r\n\r\n    /**\r\n     * Sets the rendering (draw) order of the tiles in this layer.\r\n     * \r\n     * The default is 'right-down', meaning it will order the tiles starting from the top-left,\r\n     * drawing to the right and then moving down to the next row.\r\n     * \r\n     * The draw orders are:\r\n     * \r\n     * 0 = right-down\r\n     * 1 = left-down\r\n     * 2 = right-up\r\n     * 3 = left-up\r\n     * \r\n     * Setting the render order does not change the tiles or how they are stored in the layer,\r\n     * it purely impacts the order in which they are rendered.\r\n     * \r\n     * You can provide either an integer (0 to 3), or the string version of the order.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setRenderOrder\r\n     * @since 3.12.0\r\n     *\r\n     * @param {(integer|string)} renderOrder - The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setRenderOrder: function (renderOrder)\r\n    {\r\n        var orders = [ 'right-down', 'left-down', 'right-up', 'left-up' ];\r\n\r\n        if (typeof renderOrder === 'string')\r\n        {\r\n            renderOrder = orders.indexOf(renderOrder);\r\n        }\r\n\r\n        if (renderOrder >= 0 && renderOrder < 4)\r\n        {\r\n            this._renderOrder = renderOrder;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n     * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n     * internally to optimize recalculating faces when only one tile has been changed.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate.\r\n     * @param {integer} tileY - The y coordinate.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesAt: function (tileX, tileY)\r\n    {\r\n        TilemapComponents.CalculateFacesAt(tileX, tileY, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n     * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n     * is mostly used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesWithin: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n     * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n     * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n     * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#createFromTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n     * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n     * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n     * one-to-one mapping with the indexes array.\r\n     * @param {SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n     */\r\n    createFromTiles: function (indexes, replacements, spriteConfig, scene, camera)\r\n    {\r\n        return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Returns the tiles in the given layer that are within the cameras viewport.\r\n     * This is used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    cull: function (camera)\r\n    {\r\n        return this.cullCallback(this.layer, camera, this.culledTiles, this._renderOrder);\r\n    },\r\n\r\n    /**\r\n     * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n     * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n     * information in the destination region.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} srcTileX - The x coordinate of the area to copy from, in tiles, not pixels.\r\n     * @param {integer} srcTileY - The y coordinate of the area to copy from, in tiles, not pixels.\r\n     * @param {integer} width - The width of the area to copy, in tiles, not pixels.\r\n     * @param {integer} height - The height of the area to copy, in tiles, not pixels.\r\n     * @param {integer} destTileX - The x coordinate of the area to copy to, in tiles, not pixels.\r\n     * @param {integer} destTileY - The y coordinate of the area to copy to, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    copy: function (srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces)\r\n    {\r\n        TilemapComponents.Copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroys this DynamicTilemapLayer and removes its link to the associated LayerData.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        // Uninstall this layer only if it is still installed on the LayerData object\r\n        if (this.layer.tilemapLayer === this)\r\n        {\r\n            this.layer.tilemapLayer = undefined;\r\n        }\r\n\r\n        this.tilemap = undefined;\r\n        this.layer = undefined;\r\n        this.culledTiles.length = 0;\r\n        this.cullCallback = null;\r\n\r\n        this.gidMap = [];\r\n        this.tileset = [];\r\n\r\n        GameObject.prototype.destroy.call(this);\r\n    },\r\n\r\n    /**\r\n     * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n     * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n     * Collision information in the region will be recalculated.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#fill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index to fill the area with.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    fill: function (index, tileX, tileY, width, height, recalculateFaces)\r\n    {\r\n        TilemapComponents.Fill(index, tileX, tileY, width, height, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n     * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#filterTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n     * filter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [FilteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n     * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n     * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n     * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n     * the top-left.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#findByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index value to search for.\r\n     * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n     * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n     * bottom-right. Otherwise it scans from the top-left.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    findByIndex: function (findIndex, skip, reverse)\r\n    {\r\n        return TilemapComponents.FindByIndex(findIndex, skip, reverse, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n     * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n     * true. Similar to Array.prototype.find in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#findTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {FindTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [FilteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile}\r\n     */\r\n    findTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#forEachTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {EachTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [FilteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given tile coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n     * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n     * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile object with an index of -1.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates were invalid.\r\n     */\r\n    getTileAt: function (tileX, tileY, nonNull)\r\n    {\r\n        return TilemapComponents.GetTileAt(tileX, tileY, nonNull, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given world coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - X position to get the tile from (given in pixels)\r\n     * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n     * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile object with an index of -1.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n     * were invalid.\r\n     */\r\n    getTileAtWorldXY: function (worldX, worldY, nonNull, camera)\r\n    {\r\n        return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object} [FilteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithin: function (tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n     * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n     * @param {object} [FilteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinShape: function (shape, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The world x coordinate for the top-left of the area.\r\n     * @param {number} worldY - The world y coordinate for the top-left of the area.\r\n     * @param {number} width - The width of the area.\r\n     * @param {number} height - The height of the area.\r\n     * @param {object} [FilteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     *\r\n     * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n     */\r\n    hasTileAt: function (tileX, tileY)\r\n    {\r\n        return TilemapComponents.HasTileAt(tileX, tileY, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n     */\r\n    hasTileAtWorldXY: function (worldX, worldY, camera)\r\n    {\r\n        return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\r\n     * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\r\n     * location. If you pass in an index, only the index at the specified location will be changed.\r\n     * Collision information will be recalculated at the specified location.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    putTileAt: function (tile, tileX, tileY, recalculateFaces)\r\n    {\r\n        return TilemapComponents.PutTileAt(tile, tileX, tileY, recalculateFaces, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\r\n     * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\r\n     * specified location. If you pass in an index, only the index at the specified location will be\r\n     * changed. Collision information will be recalculated at the specified location.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    putTileAtWorldXY: function (tile, worldX, worldY, recalculateFaces, camera)\r\n    {\r\n        return TilemapComponents.PutTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n     * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n     * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n     * index at the specified location will be changed. Collision information will be recalculated\r\n     * within the region tiles were changed.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTilesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    putTilesAt: function (tilesArray, tileX, tileY, recalculateFaces)\r\n    {\r\n        TilemapComponents.PutTilesAt(tilesArray, tileX, tileY, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will receive a new index. If an array of indexes is passed in, then\r\n     * those will be used for randomly assigning new tile indexes. If an array is not provided, the\r\n     * indexes found within the region (excluding -1) will be used for randomly assigning new tile\r\n     * indexes. This method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#randomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {integer[]} [indexes] - An array of indexes to randomly draw from during randomization.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    randomize: function (tileX, tileY, width, height, indexes)\r\n    {\r\n        TilemapComponents.Randomize(tileX, tileY, width, height, indexes, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    removeTileAt: function (tileX, tileY, replaceWithNull, recalculateFaces)\r\n    {\r\n        return TilemapComponents.RemoveTileAt(tileX, tileY, replaceWithNull, recalculateFaces, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given world coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    removeTileAtWorldXY: function (worldX, worldY, replaceWithNull, recalculateFaces, camera)\r\n    {\r\n        return TilemapComponents.RemoveTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n     * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n     * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n     * wherever you want on the screen.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#renderDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n     * @param {StyleConfig} styleConfig - An object specifying the colors to use for the debug drawing.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    renderDebug: function (graphics, styleConfig)\r\n    {\r\n        TilemapComponents.RenderDebug(graphics, styleConfig, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n     * not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#replaceByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} findIndex - The index of the tile to search for.\r\n     * @param {integer} newIndex - The index of the tile to replace it with.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    replaceByIndex: function (findIndex, newIndex, tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.ReplaceByIndex(findIndex, newIndex, tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * You can control if the Cameras should cull tiles before rendering them or not.\r\n     * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n     *\r\n     * However, there are some instances when you may wish to disable this.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setSkipCull\r\n     * @since 3.11.0\r\n     *\r\n     * @param {boolean} [value=true] - Set to `true` to stop culling tiles. Set to `false` to enable culling again.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setSkipCull: function (value)\r\n    {\r\n        if (value === undefined) { value = true; }\r\n\r\n        this.skipCull = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * When a Camera culls the tiles in this layer it does so using its view into the world, building up a\r\n     * rectangle inside which the tiles must exist or they will be culled. Sometimes you may need to expand the size\r\n     * of this 'cull rectangle', especially if you plan on rotating the Camera viewing the layer. Do so\r\n     * by providing the padding values. The values given are in tiles, not pixels. So if the tile width was 32px\r\n     * and you set `paddingX` to be 4, it would add 32px x 4 to the cull rectangle (adjusted for scale)\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCullPadding\r\n     * @since 3.11.0\r\n     *\r\n     * @param {integer} [paddingX=1] - The amount of extra horizontal tiles to add to the cull check padding.\r\n     * @param {integer} [paddingY=1] - The amount of extra vertical tiles to add to the cull check padding.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setCullPadding: function (paddingX, paddingY)\r\n    {\r\n        if (paddingX === undefined) { paddingX = 1; }\r\n        if (paddingY === undefined) { paddingY = 1; }\r\n\r\n        this.cullPaddingX = paddingX;\r\n        this.cullPaddingY = paddingY;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n     * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n     * collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollision: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollision(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n     * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n     * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n     * enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} start - The first index of the tile to be set for collision.\r\n     * @param {integer} stop - The last index of the tile to be set for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionBetween: function (start, stop, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n     * that matches the given properties object, its collision flag will be set. The `collides`\r\n     * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n     * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n     * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n     * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n     * \"types\" property that matches any of those values, its collision flag will be updated.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByProperty\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} properties - An object with tile properties and corresponding values that should be checked.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByProperty: function (properties, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n     * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n     * disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByExclusion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByExclusion: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking each tiles collision group data\r\n     * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n     * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\r\n     * controls if collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionFromCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionFromCollisionGroup: function (collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n     * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n     * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n     * at a specific location on the map then see setTileLocationCallback.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileIndexCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|integer[])} indexes - Either a single tile index, or an array of tile indexes to have a collision callback set for.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileIndexCallback: function (indexes, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\r\n     * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n     * remove it.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileLocationCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {function} [callback] - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} [callbackContext] - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n     * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n     * appear to have changed! This method only modifies tile indexes and does not change collision\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#shuffle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    shuffle: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.Shuffle(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#swapByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileA - First tile index.\r\n     * @param {integer} tileB - Second tile index.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    swapByIndex: function (indexA, indexB, tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.SwapByIndex(indexA, indexB, tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldX: function (tileX, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldX(tileX, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldY: function (tileY, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldY(tileY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    tileToWorldXY: function (tileX, tileY, point, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will recieve a new index. New indexes are drawn from the given\r\n     * weightedIndexes array. An example weighted array:\r\n     *\r\n     * [\r\n     *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\r\n     *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\r\n     *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\r\n     *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\r\n     * ]\r\n     *\r\n     * The probability of any index being choose is (the index's weight) / (sum of all weights). This\r\n     * method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#weightedRandomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object[]} [weightedIndexes] - An array of objects to randomly draw from during\r\n     * randomization. They should be in the form: { index: 0, weight: 4 } or\r\n     * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    weightedRandomize: function (tileX, tileY, width, height, weightedIndexes)\r\n    {\r\n        TilemapComponents.WeightedRandomize(tileX, tileY, width, height, weightedIndexes, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileX: function (worldX, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileY: function (worldY, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n     * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    worldToTileXY: function (worldX, worldY, snapToFloor, point, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, this.layer);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = DynamicTilemapLayer;\r\n"},"lineCount":null}},"error":null,"hash":"88dba633edabca84732a165e486d04f4","cacheData":{"env":{}}}